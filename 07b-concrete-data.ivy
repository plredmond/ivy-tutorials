#lang ivy1.7

include collections
include order

module set(elem) = {
    type this
    alias t = this

    relation contains(X:t, Y:elem) # "representation function" ?
    action emptyset returns(s:t)
    action add(s:t, e:elem) returns (s:t)
    action remove(s:t, e:elem) returns (s:t)
    # using s for both input and output indicates to compiler to update in place

    object spec = {
        after emptyset {
            assert ~contains(s, X)
        }
        after add {
            assert contains(s, X) <-> (contains(old s, X) | X = e)
        }
        after remove {
            assert contains(s, X) <-> (contains(old s, X) & X ~= e)
        }
    }

    object impl = {
        instance index : unbounded_sequence
        instance arr : array(index.t, elem)

        # "destructor" in the sense that it takes the
        # abstract type `t` (a.k.a.  `this`) to its
        # representation `arr`
        destructor repr(X:t) : arr

        definition contains(X:t, y:elem) =
            exists Z.
                0 <= Z & Z < repr(X).end
                & repr(X).value(Z) = y

        implement emptyset {
            repr(s) := arr.create(0, 0)
        }

        implement add {
            if ~contains(s, e) {
                repr(s) := arr.resize(repr(s), index.next(arr.end(repr(s))), e)
            }
        }

        implement remove {
            if some (i:index.t)
                    0 <= i & i < repr(s).end
                    & repr(s).value(i) = e {
                var last := repr(s).end.prev;
                repr(s) := repr(s).set(i, repr(s).get(last));
                repr(s) := repr(s).resize(last, 0);
            }
        }
    }

    isolate iso = this
}

type elem
instance s : set(elem)
export s.emptyset
export s.add
