#lang ivy1.7

# tutorial titled "concrete data" at
# https://kenmcmil.github.io/ivy/examples/values.html

module eg0 = {
    type coord
    type point = struct {
        x : coord,
        y : coord
    }
    action assign_x_coord_of_point(p: point) = {
        x(p) := 0
    }
}

module eg1 = {
    type nat
    type dimension = {x,y,z}
    type point = struct {
        coords(D:dimension) : nat
    }
    action assign_x_coord_of_point(p: point) = {
        coord(p, x) := 0
    }
    type line = struct {
        begin : point,
        end : point
    }
    action assign_x_coord_of_line_beginning(l: line) = {
        coord(begin(l), x) := 0
    }
}

include collections
type t
instance arr : array(t, t)
action tabulate(max: t) returns (res: arr.t) = {
    local i:t {
        i := 0;
        res := arr.create(max, 0);
        while i < max {
            res := arr.set(res, i, i*i);
            i := i + 1
        }
    }
}
#> This program seems inefficient, since it copies the array
#> each time it modifies one element. In fact it isn’t. The
#> compiler recognizes that the array can be modified “in
#> place”.

interpret t -> int
export tabulate
extract iso_impl = tabulate, arr
