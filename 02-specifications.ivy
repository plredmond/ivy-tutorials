#lang ivy1.7

type packet

object intf = {
    action send(x : packet)
    action recv(x : packet)
}

specification {
    # monitor or "ghost" state (and code); "describes a channel which can
    # reorder and duplicate packets but not corrupt [invent] packets"
    relation sent(X : packet)

    after init {
        sent(X) := false;
    }

    before intf.send {
        sent(x) := true;
    }

    before intf.recv {
        require sent(x);
    }
}

implementation {
    # one-place buffer
    individual full : bool
    individual contents : packet

    after init {
        full := false;
    }

    implement intf.send {
        full := true;
        contents := x;
    }

    action async = {
        if full {
            full := false;
            call intf.recv(contents);
            contents := *;
        }
    }

    # relates implementation vars to specification monitor?
    invariant full -> sent(contents)
}

import intf.recv # the environment will implement intf.recv
export intf.send # the environment will call intf.send
export async
